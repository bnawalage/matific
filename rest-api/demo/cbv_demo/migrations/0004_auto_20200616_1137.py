# Generated by Django 3.0.7 on 2020-06-16 06:07

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('cbv_demo', '0003_auto_20200616_1043'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('record_status', models.PositiveIntegerField()),
                ('version', models.BigIntegerField()),
                ('event_type', models.CharField(max_length=250)),
            ],
            options={
                'db_table': 't_event_types',
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('record_status', models.PositiveIntegerField()),
                ('version', models.BigIntegerField()),
                ('round', models.SmallIntegerField()),
                ('game_time', models.DateTimeField()),
                ('game_status', models.CharField(choices=[('ST', 'STARTED'), ('NP', 'NOT YET PLAYED'), ('EN', 'END'), ('HL', 'HOLD'), ('CL', 'CANCELLED'), ('PP', 'POSTPONED')], default='ST', max_length=2)),
                ('team_1_score', models.SmallIntegerField()),
                ('team_2_score', models.SmallIntegerField()),
                ('game_sequence', models.SmallIntegerField()),
            ],
            options={
                'db_table': 't_games',
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('record_status', models.PositiveIntegerField()),
                ('version', models.BigIntegerField()),
                ('tournament_name', models.CharField(max_length=100)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('tournament_status', models.CharField(choices=[('ST', 'STARTED'), ('PL', 'PLANNING'), ('EN', 'END'), ('HL', 'HOLD'), ('PB', 'PUBLISHED'), ('CL', 'CANCELLED'), ('PP', 'POSTPONED')], default='EN', max_length=2)),
            ],
            options={
                'db_table': 't_tournaments',
            },
        ),
        migrations.CreateModel(
            name='TournamentStage',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('record_status', models.PositiveIntegerField()),
                ('version', models.BigIntegerField()),
                ('stage_no', models.SmallIntegerField()),
                ('stage_name', models.CharField(max_length=100)),
                ('no_of_teams', models.SmallIntegerField()),
                ('stage_type', models.SmallIntegerField()),
                ('point_won', models.SmallIntegerField()),
                ('point_lost', models.SmallIntegerField()),
                ('point_draw', models.SmallIntegerField()),
            ],
            options={
                'db_table': 't_tournament_stages',
            },
        ),
        migrations.AlterModelOptions(
            name='user',
            options={},
        ),
        migrations.RenameField(
            model_name='management',
            old_name='user_id',
            new_name='user',
        ),
        migrations.RenameField(
            model_name='official',
            old_name='user_id',
            new_name='user',
        ),
        migrations.RenameField(
            model_name='player',
            old_name='user_id',
            new_name='user',
        ),
        migrations.AlterModelTable(
            name='user',
            table='t_users',
        ),
        migrations.CreateModel(
            name='TournamentTeam',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('record_status', models.PositiveIntegerField()),
                ('version', models.BigIntegerField()),
                ('sequence_no', models.SmallIntegerField()),
                ('tournament_position', models.SmallIntegerField()),
                ('points', models.SmallIntegerField()),
                ('games', models.SmallIntegerField()),
                ('won', models.SmallIntegerField()),
                ('lost', models.SmallIntegerField()),
                ('draw', models.SmallIntegerField()),
                ('rate_cal', models.DecimalField(decimal_places=2, max_digits=8)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('stage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.TournamentStage')),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Team')),
                ('tournament', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Tournament')),
            ],
            options={
                'db_table': 't_tournament_teams',
            },
        ),
        migrations.AddField(
            model_name='tournamentstage',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='tournamentstage',
            name='modified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='tournamentstage',
            name='tournament',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Tournament'),
        ),
        migrations.CreateModel(
            name='TournamentSquad',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('record_status', models.PositiveIntegerField()),
                ('version', models.BigIntegerField()),
                ('squad_type', models.CharField(choices=[('PL', 'PLAYER'), ('MG', 'MANAGEMENT'), ('OF', 'OFFICIALS')], default='PL', max_length=2)),
                ('is_captain', models.BooleanField()),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('management', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Management')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Player')),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Team')),
                ('tournament', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Tournament')),
            ],
            options={
                'db_table': 't_tournament_squad',
            },
        ),
        migrations.CreateModel(
            name='TournamentOfficial',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('record_status', models.PositiveIntegerField()),
                ('version', models.BigIntegerField()),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('official', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Official')),
            ],
            options={
                'db_table': 't_tournament_officials',
            },
        ),
        migrations.AddField(
            model_name='tournament',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='tournament',
            name='modified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='PlayerAttempts',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('record_status', models.PositiveIntegerField()),
                ('version', models.BigIntegerField()),
                ('attempt_time', models.DateTimeField()),
                ('score', models.DateTimeField()),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('game', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Game')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Player')),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Team')),
                ('tournament', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Tournament')),
            ],
            options={
                'db_table': 't_game_player_attempts',
            },
        ),
        migrations.CreateModel(
            name='LoginSummary',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('record_status', models.PositiveIntegerField()),
                ('version', models.BigIntegerField()),
                ('logged_in_time', models.DateTimeField()),
                ('logged_out_time', models.DateTimeField()),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 't_login_summary',
            },
        ),
        migrations.CreateModel(
            name='GamePlayer',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('record_status', models.PositiveIntegerField()),
                ('version', models.BigIntegerField()),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('game', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Game')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Player')),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Team')),
                ('tournament', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Tournament')),
            ],
            options={
                'db_table': 't_game_players',
            },
        ),
        migrations.CreateModel(
            name='GameOfficial',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('record_status', models.PositiveIntegerField()),
                ('version', models.BigIntegerField()),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('game', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Game')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('official', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Official')),
                ('tournament', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Tournament')),
            ],
            options={
                'db_table': 't_game_officials',
            },
        ),
        migrations.CreateModel(
            name='GameEvent',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('record_status', models.PositiveIntegerField()),
                ('version', models.BigIntegerField()),
                ('event_time', models.DateTimeField()),
                ('event_description', models.CharField(max_length=250)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('event_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.EventType')),
                ('game', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Game')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('player_attempt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.PlayerAttempts')),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Team')),
                ('tournament', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Tournament')),
            ],
            options={
                'db_table': 't_game_events',
            },
        ),
        migrations.AddField(
            model_name='game',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='game',
            name='from_game_1',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Game'),
        ),
        migrations.AddField(
            model_name='game',
            name='from_game_2',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Game'),
        ),
        migrations.AddField(
            model_name='game',
            name='modified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='game',
            name='stage',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.TournamentStage'),
        ),
        migrations.AddField(
            model_name='game',
            name='team_1',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Team'),
        ),
        migrations.AddField(
            model_name='game',
            name='team_2',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Team'),
        ),
        migrations.AddField(
            model_name='game',
            name='tournament',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Tournament'),
        ),
        migrations.AddField(
            model_name='game',
            name='venue',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cbv_demo.Venue'),
        ),
        migrations.AddField(
            model_name='eventtype',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventtype',
            name='modified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
    ]
